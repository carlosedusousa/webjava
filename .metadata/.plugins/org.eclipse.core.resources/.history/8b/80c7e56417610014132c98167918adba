package modelos;

import static org.junit.Assert.assertNull;

import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.Persistence;
import javax.persistence.RollbackException;

import org.junit.BeforeClass;
import org.junit.Test;

public class CatalogoTest {
	
	private static EntityManager em;

	@BeforeClass
	public static void startEntityManager() throws Exception {

		EntityManagerFactory emf = Persistence
				.createEntityManagerFactory("betapedia-test");
		em = emf.createEntityManager();
	}

	@Test(expected = RollbackException.class)
	public void nomeCatalogoObrigatorio() {
		Catalogo c = new Catalogo();
		em.getTransaction().begin();
		em.persist(c);
		em.getTransaction().commit();
	}
	
	// Teste para insercao do nome e consulta da insercao com sucesso.
	@Test
	public void nomeCatalogoInserido() {
		Catalogo c = new Catalogo("Quarta Barata");
		em.getTransaction().begin();
		em.persist(c);
		em.getTransaction().commit();
	}
	
	// Teste para verificar se o nome é único na base.
	@Test(expected = RollbackException.class)
	public void nomeCatalogoUnico() {
		Catalogo catalogoUm = new Catalogo();
		Catalogo catalogoDois = new Catalogo();
		em.getTransaction().begin();
		em.persist(catalogoUm);
		em.persist(catalogoDois);
		em.getTransaction().commit();
	}

	
	// teste de remocao de catalogo.
	@Test
	public void removerCatalogo() {
		Catalogo catalogo = new Catalogo("Do Dia");
		em.getTransaction().begin();
		em.persist(catalogo);
		em.getTransaction().commit();
		Integer pId = catalogo.getId();
		Catalogo p = em.find(Catalogo.class, pId);
		em.getTransaction().begin();
		em.remove(p);
		em.getTransaction().commit();
		Catalogo rRemovido = em.find(Catalogo.class, pId);
		assertNull(rRemovido);
	}



}
